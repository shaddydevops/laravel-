name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.get-ip.outputs.ec2_public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Test AWS CLI Access
        run: |
          aws sts get-caller-identity
          aws s3 ls s3://shadrack-terraform-state-bucket || echo "Bucket listing failed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Apply Terraform
        run: terraform apply -auto-approve tfplan
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1  # Required for S3 backend


      - name: Capture EC2 Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw -no-color ec2_public_ip | tr -d '\n')
          if [[ "$IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "ec2_public_ip=$IP" >> $GITHUB_OUTPUT
          else
            echo "::error::Invalid IP format: $IP"
            exit 1
          fi
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest

      - name: Build and push backend
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest

  deploy:
    needs: [terraform, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: SSH and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ needs.terraform.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app || mkdir -p /home/ec2-user/app && cd $_
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest
            docker-compose up -d