name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.get-ip.outputs.ec2_public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      
      - name: Test AWS CLI Access
        run: |
          aws sts get-caller-identity
          aws s3 ls s3://shadrack-terraform-state-bucket || echo "Bucket listing failed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Refresh Terraform State
        run: terraform apply -refresh-only -auto-approve -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Apply Terraform
        run: terraform apply -auto-approve tfplan
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Output Debug
        run: terraform output
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


      - name: Capture EC2 Public IP
        id: get-ip
        run: |
          echo "Fetching EC2 Public IP from Terraform..."

          # Get raw IP and sanitize output
          IP=$(terraform output -raw ec2_public_ip 2>/dev/null | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1 | tr -d '\r' | tr -d '\n')

          echo "Extracted IP: $IP"

          # Validate the extracted IP
          if [[ -z "$IP" || "$IP" == "NONE" ]]; then
            echo "::error:: No Public IP retrieved from Terraform!"
            exit 1
          fi

          # Safely write to GITHUB_ENV and GITHUB_OUTPUT
          {
            echo "ec2_public_ip=$IP"
          } >> "$GITHUB_ENV"

          {
            echo "ec2_public_ip=$IP"
          } >> "$GITHUB_OUTPUT"

          echo "Public IP successfully stored in GITHUB_ENV and GITHUB_OUTPUT."



        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest

  deploy:
    needs: [terraform, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Retrieve Backend Secrets
        id: get-backend-secrets
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: BackendSecrets
          parse-json: true

      - name: Retrieve Frontend Secrets
        id: get-frontend-secrets
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: FrontendSecrets
          parse-json: true

      - name: Debug Backend Secrets
        run: |
          echo "APP_NAME=${{ steps.get-backend-secrets.outputs.APP_NAME }}"
          echo "APP_ENV=${{ steps.get-backend-secrets.outputs.APP_ENV }}"
          echo "DB_HOST=${{ steps.get-backend-secrets.outputs.DB_HOST }}"
          echo "MYSQL_ROOT_PASSWORD=${{ steps.get-backend-secrets.outputs.MYSQL_ROOT_PASSWORD }}"

      - name: Print EC@ Public IP
        run: |
          echo "Received EC2 Public IP - '${{ needs.terraform.outputs.ec2_public_ip }}'"
          if [[ -z "${{ needs.terraform.outputs.ec2_public_ip }}" ]]; then
            echo "::error:: No Public IP retrieved from Terraform!"
            exit 1
          fi

      - name: SSH and deploy application on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ needs.terraform.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Install Docker & Docker Compose
            echo "Connected to EC2 instance at: $(curl -s ifconfig.me)"
            hostname -I
            sudo amazon-linux-extras enable docker
            sudo yum install -y docker git jq aws-cli
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user

            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Clone the repository
            mkdir -p ~/app && cd ~/app
            git clone https://github.com/shaddydevops/laravel-.git .

            # Ensure .env files exist for Backend
            cat <<EOF > ./backend/.env
            APP_NAME=${{ steps.get-backend-secrets.outputs.APP_NAME }}
            APP_ENV=${{ steps.get-backend-secrets.outputs.APP_ENV }}
            APP_KEY=${{ steps.get-backend-secrets.outputs.APP_KEY }}
            APP_DEBUG=${{ steps.get-backend-secrets.outputs.APP_DEBUG }}
            DB_CONNECTION=${{ steps.get-backend-secrets.outputs.DB_CONNECTION }}
            DB_HOST=${{ steps.get-backend-secrets.outputs.DB_HOST }}
            DB_PORT=${{ steps.get-backend-secrets.outputs.DB_PORT }}
            DB_DATABASE=${{ steps.get-backend-secrets.outputs.DB_DATABASE }}
            DB_USERNAME=${{ steps.get-backend-secrets.outputs.DB_USERNAME }}
            DB_PASSWORD=${{ steps.get-backend-secrets.outputs.DB_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ steps.get-backend-secrets.outputs.MYSQL_ROOT_PASSWORD }}
            EOF

            # Ensure .env files exist for Frontend
            cat <<EOF > ./frontend/.env
            APP_NAME=${{ steps.get-frontend-secrets.outputs.APP_NAME }}
            BACKEND_API_HOST=${{ steps.get-frontend-secrets.outputs.BACKEND_API_HOST }}
            SECRET_COOKIE_PASSWORD=${{ steps.get-frontend-secrets.outputs.SECRET_COOKIE_PASSWORD }}
            TINY_MCE_API_KEY=${{ steps.get-frontend-secrets.outputs.TINY_MCE_API_KEY }}
            REACT_APP_API_URL=${{ steps.get-frontend-secrets.outputs.REACT_APP_API_URL }}
            REACT_APP_API_URL_DOCKER=${{ steps.get-frontend-secrets.outputs.REACT_APP_API_URL_DOCKER }}
            NEXT_PUBLIC_API_URL=${{ steps.get-frontend-secrets.outputs.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_API_URL_LOCAL=${{ steps.get-frontend-secrets.outputs.NEXT_PUBLIC_API_URL_LOCAL }}
            EOF

            # Check if docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "::error::docker-compose.yml not found in ~/app directory"
              exit 1
            fi

            # Deploy using Docker Compose
            docker-compose pull && docker-compose up -d

            # Optional: Check logs
            docker-compose logs --tail="100"
