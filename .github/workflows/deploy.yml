name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.get-ip.outputs.ec2_public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      
      - name: Test AWS CLI Access
        run: |
          aws sts get-caller-identity
          aws s3 ls s3://shadrack-terraform-state-bucket || echo "Bucket listing failed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Refresh Terraform State
        run: terraform apply -refresh-only -auto-approve -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Apply Terraform
        run: terraform apply -auto-approve tfplan
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Output Debug
        run: terraform output
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


      - name: Capture EC2 Public IP
        id: get-ip
        run: |
          echo "Fetching EC2 Public IP from Terraform..."

          # Get raw IP and sanitize output
          IP=$(terraform output -raw ec2_public_ip 2>/dev/null | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1 | tr -d '\r' | tr -d '\n')

          echo "Extracted IP: $IP"

          # Validate the extracted IP
          if [[ -z "$IP" || "$IP" == "NONE" ]]; then
            echo "::error:: No Public IP retrieved from Terraform!"
            exit 1
          fi

          # Safely write to GITHUB_ENV and GITHUB_OUTPUT
          {
            echo "ec2_public_ip=$IP"
          } >> "$GITHUB_ENV"

          {
            echo "ec2_public_ip=$IP"
          } >> "$GITHUB_OUTPUT"

          echo "Public IP successfully stored in GITHUB_ENV and GITHUB_OUTPUT."



        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest

  deploy:
    needs: [terraform, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Retrieve Backend Secrets Using AWS CLI
        run: |
          echo "Fetching secrets from AWS Secrets Manager..."
          mkdir -p ./backend
          SECRET=$(aws secretsmanager get-secret-value --secret-id BackendSecrets --region us-east-1 --query SecretString --output text)
          echo "$SECRET" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > ./backend/.env

      - name: Retrieve Frontend Secrets Using AWS CLI
        run: |
          echo "Fetching frontend secrets from AWS Secrets Manager..."
          mkdir -p ./frontend
          FRONTEND_SECRET=$(aws secretsmanager get-secret-value --secret-id FrontendSecrets --region us-east-1 --query SecretString --output text)
          echo "$FRONTEND_SECRET" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > ./frontend/.env

      - name: Debug Frontend Secrets Retrieval
        run: |
          echo "Raw JSON from Secrets Manager:"
          aws secretsmanager get-secret-value --secret-id FrontendSecrets --region us-east-1 --query SecretString --output text

          echo "Generated frontend .env file:"
          cat ./frontend/.env || echo "::error:: Frontend .env file not found or empty."

      - name: Print EC@ Public IP
        run: |
          echo "Received EC2 Public IP - '${{ needs.terraform.outputs.ec2_public_ip }}'"
          if [[ -z "${{ needs.terraform.outputs.ec2_public_ip }}" ]]; then
            echo "::error:: No Public IP retrieved from Terraform!"
            exit 1
          fi

      - name: Prepare Environment Files
        run: |
          BACKEND_ENV=$(cat ./backend/.env)
          FRONTEND_ENV=$(cat ./frontend/.env)
          echo "BACKEND_ENV<<EOF" >> $GITHUB_ENV
          echo "$BACKEND_ENV" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FRONTEND_ENV<<EOF" >> $GITHUB_ENV
          echo "$FRONTEND_ENV" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: SSH and deploy application on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ needs.terraform.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: BACKEND_ENV,FRONTEND_ENV
          script: |
            # Setup application directory
            mkdir -p ~/app
            cd ~/app
            
            # Create backend .env file
            echo "$BACKEND_ENV" > ./backend/.env
            
            # Create frontend .env file
            echo "$FRONTEND_ENV" > ./frontend/.env
            
            # Deploy using Docker Compose
            echo "Starting deployment..."
            docker-compose down || true
            docker-compose pull
            
            # Export environment variables for Docker Compose
            export $(cat ./backend/.env | xargs)
            
            # Start containers
            docker-compose up -d
            
            # Wait and check status
            sleep 30
            docker-compose ps
            docker-compose logs --tail=50
