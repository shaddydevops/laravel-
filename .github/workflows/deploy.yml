name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # DEBUGGING STEP FOR AWS PERMISSIONS
      - name: Test AWS CLI Access (Debug)
        run: |
          echo "AWS Region: $AWS_REGION"
          echo "Checking AWS credentials..."
          aws sts get-caller-identity || echo "ERROR: Unable to get caller identity"
          
          echo "Checking S3 bucket listing permissions..."
          aws s3 ls s3://shadrack-terraform-state-bucket || echo "ERROR: Cannot list S3 bucket contents"
          
          echo "Checking state file existence..."
          aws s3api head-object --bucket shadrack-terraform-state-bucket --key terraform.tfstate || echo "State file does not exist yet"
          
          echo "Checking IAM policies attached to the current user..."
          aws iam list-attached-user-policies --user-name shaddy || echo "ERROR: Unable to list attached policies"
          
          echo "Checking effective permissions on the S3 bucket..."
          aws s3api get-bucket-policy --bucket shadrack-terraform-state-bucket || echo "ERROR: Cannot retrieve bucket policy"
          
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="ami_id=${{ secrets.AWS_AMI_ID }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Show Terraform Plan
        run: terraform show -json tfplan > plan.json
        working-directory: infrastructure

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app || (mkdir -p /home/ec2-user/app && cd /home/ec2-user/app)
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest
            docker-compose up -d