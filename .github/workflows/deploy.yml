name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.get-ip.outputs.ec2_public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      
      - name: Test AWS CLI Access
        run: |
          aws sts get-caller-identity
          aws s3 ls s3://shadrack-terraform-state-bucket || echo "Bucket listing failed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Refresh Terraform State
        run: terraform apply -refresh-only -auto-approve -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="ami_id=${{ secrets.AWS_AMI_ID }}" -var="key_name=${{ secrets.EC2_SSH_PRIVATE_KEY_NAME }}"
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Apply Terraform
        run: terraform apply -auto-approve tfplan
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Output Debug
        run: terraform output
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


      - name: Capture EC2 Public IP
        id: get-ip
        run: |
          echo "Fetching EC2 Public IP from Terraform..."

          # Get raw IP and sanitize output
          IP=$(terraform output -raw ec2_public_ip 2>/dev/null | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1 | tr -d '\r' | tr -d '\n')

          echo "Extracted IP: $IP"

          # Validate the extracted IP
          if [[ -z "$IP" || "$IP" == "NONE" ]]; then
            echo "::error:: No Public IP retrieved from Terraform!"
            exit 1
          fi

          # Safely write to GITHUB_ENV and GITHUB_OUTPUT
          {
            echo "ec2_public_ip=$IP"
          } >> "$GITHUB_ENV"

          {
            echo "ec2_public_ip=$IP"
          } >> "$GITHUB_OUTPUT"

          echo "Public IP successfully stored in GITHUB_ENV and GITHUB_OUTPUT."



        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-frontend:latest

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/clms-backend:latest

  deploy:
    needs: [terraform, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Retrieve Backend Secrets Using AWS CLI
        run: |
          # This runs in GitHub Actions runner
          echo "Creating directories..."
          mkdir -p ./backend
          
          echo "Fetching backend secrets..."
          SECRET=$(aws secretsmanager get-secret-value --secret-id BackendSecrets --region us-east-1 --query SecretString --output text)
          
          echo "Writing backend .env file..."
          echo "$SECRET" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > ./backend/.env
          
          echo "Verifying backend .env creation:"
          ls -la ./backend/.env

      - name: Debug Backend Secrets
        run: |
          echo "Raw JSON from Secrets Manager (Backend):"
          aws secretsmanager get-secret-value --secret-id BackendSecrets --region us-east-1 --query SecretString --output text

      - name: Retrieve Frontend Secrets Using AWS CLI
        run: |
          # This also runs in GitHub Actions runner
          echo "Creating directories..."
          mkdir -p ./frontend
          
          echo "Fetching frontend secrets..."
          FRONTEND_SECRET=$(aws secretsmanager get-secret-value --secret-id FrontendSecrets --region us-east-1 --query SecretString --output text)
          
          echo "Writing frontend .env file..."
          echo "$FRONTEND_SECRET" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > ./frontend/.env
          
          echo "Verifying frontend .env creation:"
          ls -la ./frontend/.env

      - name: Print EC@ Public IP
        run: |
          echo "Received EC2 Public IP - '${{ needs.terraform.outputs.ec2_public_ip }}'"
          if [[ -z "${{ needs.terraform.outputs.ec2_public_ip }}" ]]; then
            echo "::error:: No Public IP retrieved from Terraform!"
            exit 1
          fi

      - name: Prepare Environment Files
        run: |
          # This prepares the variables to be sent to EC2
          BACKEND_ENV=$(cat ./backend/.env)
          FRONTEND_ENV=$(cat ./frontend/.env)
          echo "BACKEND_ENV<<EOF" >> $GITHUB_ENV
          echo "$BACKEND_ENV" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FRONTEND_ENV<<EOF" >> $GITHUB_ENV
          echo "$FRONTEND_ENV" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug Environment Files Preparation
        run: |
          echo "=== Checking Environment Variables ==="
          
          echo "Backend .env contents:"
          cat ./backend/.env || echo "Backend .env file not found"
          
          echo -e "\nFrontend .env contents (with URL check):"
          cat ./frontend/.env || echo "Frontend .env file not found"
          
          echo -e "\nChecking URL configurations:"
          echo "BACKEND_API_HOST: $(grep BACKEND_API_HOST ./frontend/.env)"
          echo "REACT_APP_API_URL: $(grep REACT_APP_API_URL ./frontend/.env)"
          echo "NEXT_PUBLIC_API_URL: $(grep NEXT_PUBLIC_API_URL= ./frontend/.env)"
          
          echo -e "\nVerifying GITHUB_ENV contents:"
          cat $GITHUB_ENV || echo "GITHUB_ENV not accessible"

      - name: SSH and deploy application on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ needs.terraform.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: BACKEND_ENV,FRONTEND_ENV
          script: |
            # This runs inside EC2
            echo "=== Debug: Environment Files Reception ==="
            
            # Setup directory
            mkdir -p ~/app/backend ~/app/frontend
            cd ~/app
            
            # Create and verify backend .env
            echo "$BACKEND_ENV" > ./backend/.env
            echo "Backend .env file contents:"
            cat ./backend/.env || echo "ERROR: Backend .env is empty or missing"
            echo "Backend .env file size: $(wc -l ./backend/.env | awk '{print $1}') lines"
            
            # Create frontend .env file
            echo "$FRONTEND_ENV" > ./frontend/.env
            
            # Export MySQL specific variables from AWS Secrets
            export $(grep -E "^(DB_DATABASE|DB_USERNAME|DB_PASSWORD|MYSQL_ROOT_PASSWORD)=" ./backend/.env | xargs)
            
            echo "=== Verifying MySQL Environment Variables ==="
            echo "DB_DATABASE: $DB_DATABASE"
            echo "DB_USERNAME: $DB_USERNAME"
            echo "DB_PASSWORD: $DB_PASSWORD"
            echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD"
            
            # Create a temporary env file for docker-compose
            echo "Creating temporary env file for docker-compose..."
            cat > .env << EOL
            # Database connection for Laravel
            DB_HOST=db
            DB_PORT=3306
            DB_DATABASE=clms_db
            DB_USERNAME=clms_user
            DB_PASSWORD=clmspass123

            # MySQL container configuration
            MYSQL_ROOT_PASSWORD=rootpass123
            MYSQL_DATABASE=clms_db
            MYSQL_USER=clms_user
            MYSQL_PASSWORD=clmspass123
            EOL
            
            echo "=== Verifying .env file contents ==="
            cat .env
            
            # Start DB container first
            echo "=== Starting DB Container ==="
            docker-compose down || true
            docker-compose up -d db
            echo "Waiting for DB to initialize..."
            sleep 20
            
            echo "=== DB Container Logs ==="
            docker-compose logs db
            
            # Check if container exists before inspecting
            if docker ps -a --format '{{.Names}}' | grep -q "^mysql_db$"; then
              echo "=== DB Container Status ==="
              docker inspect mysql_db --format='{{.State.Status}}'
              docker inspect mysql_db --format='{{.State.Health.Status}}'
              
              if [ "$(docker inspect mysql_db --format='{{.State.Health.Status}}')" = "healthy" ]; then
                echo "DB is healthy, starting other containers..."
                docker-compose up -d
              else
                echo "ERROR: DB container is unhealthy"
                echo "=== Detailed DB Logs ==="
                docker-compose logs db
                exit 1
              fi
            else
              echo "ERROR: DB container not found"
              docker ps -a
              exit 1
            fi
